%% Secuencia: Compra (b치sico, numerado, agrupaci칩n y paquete deluxe)
sequenceDiagram
actor Cliente
participant AppCli
participant PurchaseService
participant LocalidadRepository
participant AsientoRepository
participant OfertaRepository
participant UsuarioRepository
participant OfferEngine
participant PricingPolicy
participant TicketFactory
participant TiqueteRepository

%% Comprar b치sico (localidad no numerada)
Cliente->>AppCli: comprarBasico(localidadId, transferible)
AppCli->>PurchaseService: comprarBasico(cliente, localidadId, transferible)
PurchaseService->>LocalidadRepository: findById(localidadId)
LocalidadRepository-->>PurchaseService: Optional<Localidad>
alt localidad es numerada
  PurchaseService-->>AppCli: BusinessException("Usa compra numerada...")
else localidad no numerada
  PurchaseService->>OfertaRepository: findByLocalidad(locId)
  OfertaRepository-->>PurchaseService: List<Oferta>
  PurchaseService->>OfferEngine: mejorDescuento(ofertas, hoy)
  OfferEngine-->>PurchaseService: double descuento
  PurchaseService->>UsuarioRepository: findAll()
  UsuarioRepository-->>PurchaseService: List<Usuario>
  PurchaseService->>PricingPolicy: calcularPrecio(precioBase, descuento, cargo%, cuota)
  PricingPolicy-->>PurchaseService: PriceBreakdown
  PurchaseService->>UsuarioRepository: update(ClienteComprador con saldo-)
  PurchaseService->>TicketFactory: crearBasico(localidadId, transferible)
  TicketFactory-->>PurchaseService: TiqueteBasico
  PurchaseService->>TiqueteBasico: marcarVendido(compradorId, total, cargo, cuota)
  PurchaseService->>TiqueteRepository: save(TiqueteBasico)
  TiqueteRepository-->>PurchaseService: TiqueteBasico
  PurchaseService-->>AppCli: TiqueteBasico
end

%% Comprar numerado (por asiento)
Cliente->>AppCli: comprarNumerado(asientoId, transferible)
AppCli->>PurchaseService: comprarNumerado(cliente, asientoId, transferible)
PurchaseService->>AsientoRepository: findById(asientoId)
AsientoRepository-->>PurchaseService: Optional<Asiento>
alt asiento no disponible
  PurchaseService-->>AppCli: BusinessException("Asiento no disponible")
else asiento ok
  PurchaseService->>LocalidadRepository: findById(localidadId from asiento)
  LocalidadRepository-->>PurchaseService: Optional<Localidad>
  PurchaseService->>OfertaRepository: findByLocalidad(locId)
  OfertaRepository-->>PurchaseService: List<Oferta>
  PurchaseService->>OfferEngine: mejorDescuento(...)
  OfferEngine-->>PurchaseService: double descuento
  PurchaseService->>UsuarioRepository: findAll()
  UsuarioRepository-->>PurchaseService: List<Usuario>
  PurchaseService->>PricingPolicy: calcularPrecio(...)
  PricingPolicy-->>PurchaseService: PriceBreakdown
  PurchaseService->>UsuarioRepository: update(ClienteComprador con saldo-)
  PurchaseService->>TicketFactory: crearNumerado(localidadId, transferible, numeroAsiento)
  TicketFactory-->>PurchaseService: TiqueteNumerado
  PurchaseService->>TiqueteNumerado: marcarVendido(...)
  PurchaseService->>AsientoRepository: update(asiento.disponible=false)
  PurchaseService->>TiqueteRepository: save(TiqueteNumerado)
  TiqueteRepository-->>PurchaseService: TiqueteNumerado
  PurchaseService-->>AppCli: TiqueteNumerado
end

%% Comprar agrupaci칩n
Cliente->>AppCli: comprarAgrupacion(localidadId, cantidad, transferible)
AppCli->>PurchaseService: comprarAgrupacion(cliente, localidadId, cantidad, transferible)
PurchaseService->>LocalidadRepository: findById(localidadId)
LocalidadRepository-->>PurchaseService: Optional<Localidad>
PurchaseService->>OfertaRepository: findByLocalidad(locId)
OfertaRepository-->>PurchaseService: List<Oferta>
PurchaseService->>OfferEngine: mejorDescuento(...)
OfferEngine-->>PurchaseService: double descuento
PurchaseService->>UsuarioRepository: findAll()
UsuarioRepository-->>PurchaseService: List<Usuario>
PurchaseService->>PricingPolicy: calcularPrecio(precioBase*cantidad, ...)
PricingPolicy-->>PurchaseService: PriceBreakdown
PurchaseService->>UsuarioRepository: update(ClienteComprador con saldo-)
PurchaseService->>TicketFactory: crearAgrupacion(...)
TicketFactory-->>PurchaseService: TiqueteAgrupacion
PurchaseService->>TiqueteAgrupacion: marcarVendido(...)
PurchaseService->>TiqueteRepository: save(TiqueteAgrupacion)
TiqueteRepository-->>PurchaseService: TiqueteAgrupacion
PurchaseService-->>AppCli: TiqueteAgrupacion

%% Crear paquete deluxe
Cliente->>AppCli: crearPaqueteDeluxe(localidadId, cant, transf, desc, merch)
AppCli->>PurchaseService: crearPaqueteDeluxe(cliente, ...)
PurchaseService->>LocalidadRepository: findById(localidadId)
LocalidadRepository-->>PurchaseService: Optional<Localidad>
PurchaseService->>OfertaRepository: findByLocalidad(locId)
OfertaRepository-->>PurchaseService: List<Oferta>
PurchaseService->>OfferEngine: mejorDescuento(...)
OfferEngine-->>PurchaseService: double descuento
PurchaseService->>UsuarioRepository: findAll()
UsuarioRepository-->>PurchaseService: List<Usuario>
PurchaseService->>PricingPolicy: calcularPrecio(precioBase*cant, ...)
PricingPolicy-->>PurchaseService: PriceBreakdown
PurchaseService->>UsuarioRepository: update(ClienteComprador con saldo-)
PurchaseService->>TicketFactory: crearPaqueteDeluxe(...)
TicketFactory-->>PurchaseService: PaqueteDeluxe
PurchaseService->>PaqueteDeluxe: marcarVendido(...)
PurchaseService->>TiqueteRepository: save(PaqueteDeluxe)
TiqueteRepository-->>PurchaseService: PaqueteDeluxe
PurchaseService-->>AppCli: PaqueteDeluxe


